package com.infovault.model;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

// Java package used for mapping java objects to database tables
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity // maps class to a database
public class User {

    @Id // marks Id field as PK user
    @GeneratedValue(strategy = GenerationType.IDENTITY) // marks that Id field is autogenerated by database with new record entry
    private Long id; // stores unique identifier for user

    // stores the rest of user's pertinent info
    private String firstName;
    private String lastName;
    private String email;
    private String phoneNumber;
    private String password; // Password should be encrypted in a real application

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }  


    public String getPassword() {
        return password;
    }

    // Method to set and hash the password for a user
    public void setPassword(String password) {
    this.password = hashPassword(password);
}

    // Method to hash the password
    private String hashPassword(String password) {
    PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
    return passwordEncoder.encode(password);
    }
}

